{"ast":null,"code":"import { PRODUCT_LIST_FAIL, PRODUCT_LIST_REQUEST, PRODUCT_LIST_SUCCESS, PRODUCT_DETAILS_FAIL, PRODUCT_DETAILS_SUCCESS, PRODUCT_DETAILS_REQUEST, PRODUCT_SAVE_REQUEST, PRODUCT_SAVE_SUCCESS, PRODUCT_SAVE_FAIL } from \"../constants/productConstants\";\nimport axios from 'axios';\n\nconst listProducts = () => async dispatch => {\n  try {\n    dispatch({\n      type: PRODUCT_LIST_REQUEST\n    });\n    const {\n      data\n    } = await axios.get(\"/api/products/\");\n    dispatch({\n      type: PRODUCT_LIST_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: PRODUCT_LIST_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nconst saveProduct = product => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: PRODUCT_SAVE_REQUEST,\n      payload: product\n    });\n    const {\n      userSignin: {\n        userInfo\n      }\n    } = getState();\n    const {\n      data\n    } = await axios.post('/api/products', product, {\n      headers: {\n        'Authorization': 'Bearer ' + userInfo.token\n      }\n    });\n    dispatch({\n      type: PRODUCT_SAVE_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: PRODUCT_SAVE_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nconst detailsProduct = productId => async dispatch => {\n  try {\n    dispatch({\n      type: PRODUCT_DETAILS_REQUEST,\n      payload: productId\n    });\n    const {\n      data\n    } = await axios.get(\"/api/products/\" + productId);\n    dispatch({\n      type: PRODUCT_DETAILS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: PRODUCT_DETAILS_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nexport { listProducts, detailsProduct, saveProduct };","map":{"version":3,"sources":["C:/github/eCommerce/frontend/src/actions/productActions.js"],"names":["PRODUCT_LIST_FAIL","PRODUCT_LIST_REQUEST","PRODUCT_LIST_SUCCESS","PRODUCT_DETAILS_FAIL","PRODUCT_DETAILS_SUCCESS","PRODUCT_DETAILS_REQUEST","PRODUCT_SAVE_REQUEST","PRODUCT_SAVE_SUCCESS","PRODUCT_SAVE_FAIL","axios","listProducts","dispatch","type","data","get","payload","error","message","saveProduct","product","getState","userSignin","userInfo","post","headers","token","detailsProduct","productId"],"mappings":"AAAA,SAASA,iBAAT,EAA4BC,oBAA5B,EAAkDC,oBAAlD,EAAwEC,oBAAxE,EAA8FC,uBAA9F,EAAuHC,uBAAvH,EAAgJC,oBAAhJ,EAAsKC,oBAAtK,EAA4LC,iBAA5L,QAAqN,+BAArN;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,YAAY,GAAG,MAAM,MAAOC,QAAP,IAAoB;AAE/C,MAAI;AACAA,IAAAA,QAAQ,CAAE;AAACC,MAAAA,IAAI,EAAEX;AAAP,KAAF,CAAR;AACA,UAAM;AAACY,MAAAA;AAAD,QAAS,MAAMJ,KAAK,CAACK,GAAN,CAAU,gBAAV,CAArB;AACAH,IAAAA,QAAQ,CAAC;AAACC,MAAAA,IAAI,EAAEV,oBAAP;AAA6Ba,MAAAA,OAAO,EAAEF;AAAtC,KAAD,CAAR;AACH,GAJD,CAMA,OAAMG,KAAN,EAAY;AAERL,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEZ,iBAAR;AAA2Be,MAAAA,OAAO,EAAEC,KAAK,CAACC;AAA1C,KAAD,CAAR;AAEH;AACA,CAbD;;AAgBA,MAAMC,WAAW,GAAIC,OAAD,IAAa,OAAOR,QAAP,EAAiBS,QAAjB,KAA8B;AAC3D,MAAI;AACAT,IAAAA,QAAQ,CAAC;AAACC,MAAAA,IAAI,EAAEN,oBAAP;AAA6BS,MAAAA,OAAO,EAAEI;AAAtC,KAAD,CAAR;AACA,UAAM;AAACE,MAAAA,UAAU,EAAC;AAACC,QAAAA;AAAD;AAAZ,QAA0BF,QAAQ,EAAxC;AACA,UAAM;AAACP,MAAAA;AAAD,QAAS,MAAMJ,KAAK,CAACc,IAAN,CAAW,eAAX,EAA4BJ,OAA5B,EAAqC;AAACK,MAAAA,OAAO,EAAC;AAC/D,yBAAiB,YAAYF,QAAQ,CAACG;AADyB;AAAT,KAArC,CAArB;AAIJd,IAAAA,QAAQ,CAAC;AAACC,MAAAA,IAAI,EAAEL,oBAAP;AAA6BQ,MAAAA,OAAO,EAAEF;AAAtC,KAAD,CAAR;AACC,GARD,CAQE,OAAOG,KAAP,EAAc;AACZL,IAAAA,QAAQ,CAAC;AAACC,MAAAA,IAAI,EAAEJ,iBAAP;AAA0BO,MAAAA,OAAO,EAAEC,KAAK,CAACC;AAAzC,KAAD,CAAR;AACH;AACJ,CAZD;;AAcA,MAAMS,cAAc,GAAIC,SAAD,IAAe,MAAOhB,QAAP,IAAoB;AACtD,MAAG;AACCA,IAAAA,QAAQ,CAAC;AAACC,MAAAA,IAAI,EAAEP,uBAAP;AAAgCU,MAAAA,OAAO,EAAEY;AAAzC,KAAD,CAAR;AACA,UAAM;AAACd,MAAAA;AAAD,QAAS,MAAMJ,KAAK,CAACK,GAAN,CAAU,mBAAmBa,SAA7B,CAArB;AACAhB,IAAAA,QAAQ,CAAC;AAACC,MAAAA,IAAI,EAAER,uBAAP;AAAgCW,MAAAA,OAAO,EAAEF;AAAzC,KAAD,CAAR;AACC,GAJL,CAIM,OAAOG,KAAP,EAAc;AAChBL,IAAAA,QAAQ,CAAC;AAACC,MAAAA,IAAI,EAAET,oBAAP;AAA6BY,MAAAA,OAAO,EAAEC,KAAK,CAACC;AAA5C,KAAD,CAAR;AACC;AACR,CARD;;AAUA,SAASP,YAAT,EAAuBgB,cAAvB,EAAuCR,WAAvC","sourcesContent":["import { PRODUCT_LIST_FAIL, PRODUCT_LIST_REQUEST, PRODUCT_LIST_SUCCESS, PRODUCT_DETAILS_FAIL, PRODUCT_DETAILS_SUCCESS, PRODUCT_DETAILS_REQUEST, PRODUCT_SAVE_REQUEST, PRODUCT_SAVE_SUCCESS, PRODUCT_SAVE_FAIL } from \"../constants/productConstants\"\r\nimport axios from 'axios';\r\n\r\nconst listProducts = () => async (dispatch) => {\r\n\r\ntry {\r\n    dispatch( {type: PRODUCT_LIST_REQUEST});\r\n    const {data} = await axios.get(\"/api/products/\")\r\n    dispatch({type: PRODUCT_LIST_SUCCESS, payload: data})\r\n}\r\n\r\ncatch(error){\r\n\r\n    dispatch({ type: PRODUCT_LIST_FAIL, payload: error.message })\r\n\r\n}\r\n}\r\n\r\n\r\nconst saveProduct = (product) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({type: PRODUCT_SAVE_REQUEST, payload: product});\r\n        const {userSignin:{userInfo}} = getState();\r\n        const {data} = await axios.post('/api/products', product, {headers:{\r\n            'Authorization': 'Bearer ' + userInfo.token\r\n        }\r\n    })\r\n    dispatch({type: PRODUCT_SAVE_SUCCESS, payload: data });\r\n    } catch (error) {\r\n        dispatch({type: PRODUCT_SAVE_FAIL, payload: error.message });\r\n    }\r\n}\r\n\r\nconst detailsProduct = (productId) => async (dispatch) => {\r\n    try{\r\n        dispatch({type: PRODUCT_DETAILS_REQUEST, payload: productId});\r\n        const {data} = await axios.get(\"/api/products/\" + productId);\r\n        dispatch({type: PRODUCT_DETAILS_SUCCESS, payload: data})\r\n        } catch (error) {\r\n        dispatch({type: PRODUCT_DETAILS_FAIL, payload: error.message })\r\n        }\r\n}\r\n\r\nexport { listProducts, detailsProduct, saveProduct }"]},"metadata":{},"sourceType":"module"}